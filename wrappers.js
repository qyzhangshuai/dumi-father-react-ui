(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[28],{"9kvl":function(e,t,i){"use strict";var n=i("FfOG");i.d(t,"a",(function(){return n["b"]}));var a=i("bCY9");i.d(t,"b",(function(){return a["a"]}))},q3YX:function(e){e.exports=JSON.parse('{"menus":{"en-US":{"*":[{"path":"/","title":"Hello z-react-ui!","meta":{}}],"/guide":[{"path":"/guide","title":"\u5173\u4e8e z-react-ui","meta":{"order":1}},{"path":"/guide/build","title":"\u642d\u5efa\u8fc7\u7a0b","meta":{"order":2}},{"path":"/guide/customize-theme","title":"\u5b9a\u5236\u4e3b\u9898","meta":{"order":3}},{"path":"/guide/contribution","title":"\u8d21\u732e\u6307\u5357","meta":{}}],"/components":[{"title":"ChatPanel \u804a\u5929\u9762\u677f","path":"/components/chat-panel","meta":{},"children":[]},{"title":"DragList \u62d6\u62fd\u5217\u8868","path":"/components/drag-list","meta":{},"children":[]},{"title":"EmojiconTab \u8868\u60c5tab","path":"/components/emojicon-tab","meta":{},"children":[]},{"title":"EnlargeImg \u653e\u5927\u67e5\u770b\u56fe\u7247","path":"/components/enlarge-img","meta":{},"children":[]},{"title":"OrgTree \u7ec4\u7ec7\u67b6\u6784\u6811","path":"/components/org-tree","meta":{},"children":[]},{"title":"Transition \u51fa\u73b0\u6d88\u5931\u52a8\u753b","path":"/components/transition","meta":{},"children":[]}]}},"locales":[{"name":"en-US","label":"English"}],"navs":{"en-US":[{"title":"\u5f00\u53d1\u6307\u5357","path":"/guide"},{"title":"\u7ec4\u4ef6","path":"/components"},{"title":"Github","path":"https://github.com/qyzhangshuai/dumi-father-react-ui"}]},"title":"z-react-ui","mode":"site","repository":{"url":"https://github.com/qyzhangshuai/dumi-father-react-ui","branch":"master"},"theme":{}}')},x2v5:function(e){e.exports=JSON.parse('{"drag-list":{"default":[{"identifier":"dropClassName","description":"\u62d6\u62fd\u533a\u57df\u7c7b\u540d","type":"string"},{"identifier":"dropStyle","description":"\u62d6\u62fd\u533a\u57df\u6837\u5f0f","type":"CSSProperties","default":"{}"},{"identifier":"setDropStyleFn","description":"\u62d6\u62fd\u533a\u57df\u6837\u5f0f\u6839\u636eisDraggingOver\u8bbe\u7f6e\u6837\u5f0f","type":"(isDraggingOver?: boolean) => CSSProperties","default":"isDraggingOver\u62d6\u62fd\u65f6\u4e3atrue\uff0c\u5176\u4ed6\u65f6\u523b\u4e3afalse"},{"identifier":"drapClassName","description":"\u62d6\u62fd\u5bf9\u8c61\u7c7b\u540d","type":"string"},{"identifier":"drapStyle","description":"\u62d6\u62fd\u5bf9\u8c61\u6837\u5f0f","type":"CSSProperties","default":"{}"},{"identifier":"setDrapStyleFn","description":"\u62d6\u62fd\u5bf9\u8c61\u6837\u5f0f\u6839\u636eisDragging\u8bbe\u7f6e\u6837\u5f0f","type":"(isDragging?: boolean, draggableStyle?: CSSProperties) => CSSProperties"},{"identifier":"onDragEnd","description":"\u62d6\u62fd\u7ed3\u675f\u4e8b\u4ef6","type":"(result: DropResult, provided: ResponderProvided) => void"},{"identifier":"dataSource","description":"\u6570\u636e\u6e90","type":"DataSource[]","default":"[]"},{"identifier":"renderItem","description":"\u6e32\u67d3\u5355\u6761\u6570\u636e\uff0c\u4e14\u6570\u636e\u6e90\u5bf9\u8c61\u4e2d\uff0c\u5fc5\u987b\u8981\u6709\u552f\u4e00id\u5c5e\u6027","type":"(item?: DataSource, index?: number) => ReactNode","required":true},{"identifier":"direction","description":"\u62d6\u62fd\u65b9\u5411","type":"\\"horizontal\\" | \\"vertical\\"","default":"vertical"},{"identifier":"droppableId","description":"\u62d6\u62fd\u533a\u57df\u552f\u4e00id","type":"string","default":"droppable"},{"identifier":"draggableId","description":"\u786e\u4fdd\u6bcf\u4e2a\u62d6\u62fd\u5bf9\u8c61id\u5171\u7528\u524d\u7f00","type":"string","default":"draggable"}]},"enlarge-img":{"default":[{"identifier":"src","description":"\u56fe\u7247\u5730\u5740","type":"string","required":true},{"identifier":"alt","description":"\u5982\u679c\u65e0\u6cd5\u663e\u793a\u56fe\u50cf\uff0c\u6d4f\u89c8\u5668\u5c06\u663e\u793a\u66ff\u4ee3\u6587\u672c","type":"string","default":"\u56fe\u7247"},{"identifier":"className","description":"\u56fe\u7247\u7c7b\u540d","type":"string"},{"identifier":"warpClassName","description":"\u6574\u4f53\u7c7b\u540d","type":"string"},{"identifier":"onClick","description":"\u56fe\u7247\u70b9\u51fb\u4e8b\u4ef6","type":"() => void"}]},"transition":{"default":[{"identifier":"animation","description":"\u6307\u5b9a\u52a8\u753b\u7c7b\u578b","type":"AnimationName","default":"top"},{"identifier":"className","description":"\u81ea\u5b9a\u4e49\u52a8\u753b\u7c7b\u540d,\u82e5\u5b58\u5728\u5219animation\u5931\u6548","type":"string"},{"identifier":"timeout","description":"The duration of the transition, in milliseconds. Required unless addEndListener is provided.\\n\\nYou may specify a single timeout for all transitions:\\n```js\\n  timeout={500}\\n```\\nor individually:\\n```js\\ntimeout={{\\n appear: 500,\\n enter: 300,\\n exit: 500,\\n}}\\n```\\n- appear defaults to the value of `enter`\\n- enter defaults to `0`\\n- exit defaults to `0`","type":"number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }"},{"identifier":"addEndListener","description":"Add a custom transition end trigger. Called with the transitioning DOM\\nnode and a done callback. Allows for more fine grained transition end\\nlogic. Note: Timeouts are still used as a fallback if provided.","type":"(node: HTMLElement, done: () => void) => void"},{"identifier":"in","description":"Show the component; triggers the enter or exit states","type":"boolean"},{"identifier":"mountOnEnter","description":"By default the child component is mounted immediately along with the\\nparent Transition component. If you want to \\"lazy mount\\" the component on\\nthe first `in={true}` you can set `mountOnEnter`. After the first enter\\ntransition the component will stay mounted, even on \\"exited\\", unless you\\nalso specify `unmountOnExit`.","type":"boolean"},{"identifier":"unmountOnExit","description":"By default the child component stays mounted after it reaches the\\n\'exited\' state. Set `unmountOnExit` if you\'d prefer to unmount the\\ncomponent after it finishes exiting.","type":"boolean","default":"true"},{"identifier":"onEnter","description":"Callback fired before the \\"entering\\" status is applied. An extra\\nparameter `isAppearing` is supplied to indicate if the enter stage is\\noccurring on the initial mount","type":"(node: HTMLElement, isAppearing: boolean) => void"},{"identifier":"onEntering","description":"Callback fired after the \\"entering\\" status is applied. An extra parameter\\nisAppearing is supplied to indicate if the enter stage is occurring on\\nthe initial mount","type":"(node: HTMLElement, isAppearing: boolean) => void"},{"identifier":"onEntered","description":"Callback fired after the \\"entered\\" status is applied. An extra parameter\\nisAppearing is supplied to indicate if the enter stage is occurring on\\nthe initial mount","type":"(node: HTMLElement, isAppearing: boolean) => void"},{"identifier":"onExit","description":"Callback fired before the \\"exiting\\" status is applied.","type":"(node: HTMLElement) => void"},{"identifier":"onExiting","description":"Callback fired after the \\"exiting\\" status is applied.","type":"(node: HTMLElement) => void"},{"identifier":"onExited","description":"Callback fired after the \\"exited\\" status is applied.","type":"(node: HTMLElement) => void"},{"identifier":"children","description":"A function child can be used instead of a React element. This function is\\ncalled with the current transition status (\'entering\', \'entered\',\\n\'exiting\',  \'exited\', \'unmounted\'), which can be used to apply context\\nspecific props to a component.\\n```jsx\\n   <Transition in={this.state.in} timeout={150}>\\n       {state => (\\n           <MyComponent className={`fade fade-${state}`} />\\n       )}\\n   </Transition>\\n```","type":"TransitionChildren & ReactNode"},{"identifier":"nodeRef","description":"A React reference to DOM element that need to transition: https://stackoverflow.com/a/51127130/4671932\\nWhen `nodeRef` prop is used, node is not passed to callback functions (e.g. onEnter) because user already has direct access to the node.\\nWhen changing `key` prop of `Transition` in a `TransitionGroup` a new `nodeRef` need to be provided to `Transition` with changed `key`\\nprop (@see https://github.com/reactjs/react-transition-group/blob/master/test/Transition-test.js).","type":"Ref<undefined>"},{"identifier":"classNames","description":"The animation `classNames` applied to the component as it enters or exits.\\nA single name can be provided and it will be suffixed for each stage: e.g.\\n\\n`classNames=\\"fade\\"` applies `fade-enter`, `fade-enter-active`,\\n`fade-exit`, `fade-exit-active`, `fade-appear`, and `fade-appear-active`.\\n\\nEach individual classNames can also be specified independently like:\\n\\n```js\\nclassNames={{\\n  appear: \'my-appear\',\\n  appearActive: \'my-appear-active\',\\n  appearDone: \'my-appear-done\',\\n  enter: \'my-enter\',\\n  enterActive: \'my-enter-active\',\\n  enterDone: \'my-enter-done\',\\n  exit: \'my-exit\',\\n  exitActive: \'my-exit-active\',\\n  exitDone: \'my-exit-done\'\\n}}\\n```","type":"string | CSSTransitionClassNames"}]}}')}}]);